const l = (log) => {
    console.log(log);
}
let arr = [1, 'cat', 777, 'ararat']
arr.forEach((e, i) => {
    l(i + 1 + ") " + e + " тип данных " + typeof e)
})
l(`${arr}  " тип данных "  ${typeof arr}`)

let alphabet = [];

//добавить в конец массива
alphabet.push('Г');
alphabet.push('Д');
alphabet.push('Е', 'Ё', 'Ж', 'З');

l(alphabet)

//добавить в начало массива

alphabet.unshift('В');
alphabet.unshift('А', 'Б');
l(alphabet)
l(alphabet.length)

/*
Перемешивание массива — это перемещение элементов в произвольном порядке. Процесс происходит 
при изменении индексов у элементов массива. 
Операция перемешивания используется для широкого круга задач.
 Например, при создании игры в карты нужно задать функцию перемешивания колоды карт,
  то есть упорядоченного массива.
Перемешивание двух переменных
Произвольное перемешивание — тип перемешивания, при котором порядок выбирается случайным образом. 
В начале разберём простейшее перемешивание двух переменных с числами.

 */
/*Даны две переменные: a = 3, b = 7. Мы можем поменять эти переменные местами или оставить как есть. 
Это и будет произвольным перемешиванием.*/
let a = 3;
let b = 7;
/*
Этап 2
Есть несколько способов поменять переменные местами. Используем для этого буферную переменную temp для временного хранения.

В temp присвоим значение из переменной a. 
В переменную a поместим значение из переменной b. 
Наконец, переменной b присвоим значение из переменной temp. 
*/
let temp = a;
a = b
b = temp
l(a)
l(b)

/*
Перемешивание элементов массива
Самый популярный и простой алгоритм перемешивания элементов массива — «тасование Фишера — Йетса». 
Он заключается в следующем:

цикл проходит по каждому элементу массива;
для каждого следующего элемента находит произвольную пару (рандомный индекс элемента);
после этого алгоритм меняет элементы местами.
Рассмотрим этот алгоритм более подробно на примере.
*/

l('Перемешивание элементов массива')
/*Шаг 1
Дан массив: arr1 = [1,2,3,4,5,6,7,8,9,10]. 
Длина этого массива равна 10. 
Соответственно, и количество повторений цикла будет равно 10.
*/
let arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

/* Шаг 2
Создадим цикл со счётчиком i, который будет перебирать
 каждый элемент массива arr по очереди. 
 Назовём каждый последующий элемент arr[i]. 
*/
for (let i = 0; i < arr1.length; ++i) {

    /*
    Шаг 3
Внутри тела цикла при каждом повторении сгенерируем произвольное число в диапазоне от 0 до длины массива, то есть от 0 до 9, 
так как длина массива arr равна 10. Полученное число j будет индексом произвольного элемента arr[j].
    */
    let j = Math.round(Math.random() * i)
    let temp = arr1[i]
    temp = arr1[i]
    arr1[i] = arr1[j]
    arr1[j] = temp
    l(arr1[i])
    l(arr1[j])


}
l(arr1)

//тоже самое функцией
const mixing = (array) => {
    let m = array.length, t, i;
    //Пока есть элементы для перемешивания
    while (m) {
        //Взять оставшийся элемент
        i = Math.floor(Math.random() * m--);

        //И поменять его местами с текущим
        t = array[m];
        array[m] = array[i];
        array[i] = t;
    }
    return l(array);
}
mixing(alphabet);
l(`Поиск в массиве`)
/*
Поиск в массиве.
Поиском в массиве обычно называют определение порядкового номера элемента (индекса) в массиве. 
*/
/*
Шаг 1
Дан массив имён студентов: students = ['Валя','Игорь','Витя','Женя','Таня','Рома'].
Есть задача найти порядковый номер имени Женя в этом массиве.
*/
let students = ['Валя', 'Игорь', 'Витя', 'Женя', 'Таня', 'Рома'];

/*Шаг 2
Для начала создадим переменную index = −1. Если в результате выполнения программы 
в index останется отрицательное число, значит, что элемент со значением ‘Женя’ в массиве не был найден.
*/
let index = -1;
/*
Шаг 3
Далее с помощью классического цикла со счётчиком 
i проходим по каждому элементу массива и, используя 
условный оператор if, проверяем, 
равно ли значение элемента массива значению ‘Женя’. 
Если да, присваиваем переменной index счётчик цикла i и завершаем работу цикла. 
Это и будет порядковый номер найденного элемента.
Цикл будет повторять проверку до тех пор, пока программа 
не найдёт нужный элемент в массиве или цикл не закончится.
*/
for (let i = 0; i < students.length; i++) {
    if (students[i] === 'Женя') {
        index = i;
        break;
    }
}
l(index === -1 ? `Имя Женя отсутствует в массиве` : `Порядковый номер, имени Женя, в массиве ${index}`)

//тоже самое функцией
const SearchOrdinalNumb = (array) => {
    let arr = array, i, numIndex;
    i = 0
    numIndex = -1;
    while (i < arr.length) {
        i++
        if (arr[i] == 'Женя') {
            numIndex = i;
            break;
        }
    }
    return l(numIndex === -1 ? `Имя Женя отсутствует в массиве` : `Порядковый номер, имени Женя, в массиве ${numIndex}`)

}
SearchOrdinalNumb(alphabet)
//Генератор массивов
const GenerateArray = (n, m, count)=>{
    let arr = [];
  
    for (let i = 0; i <= count-1; i++){
    let min = Math.min(n,m)
    let max = Math.max(n,m)
        let randomNum = Math.floor(Math.random() * (max - min) ) + min;
arr.push(randomNum)
}
return l(arr),l(arr.length)
}
GenerateArray (-3, -10, 42);

//сгенерировать массив и перемешать в нем элементы

const GenerateAndMixingArr = (count) => {
    let array= [];
    for(let i = 1; i <= count; ++i ){
        array.push(i)
           }
    let m = array.length, t, i;
    //Пока есть элементы для перемешивания
    while (m) {
        //Взять оставшийся элемент
        i = Math.floor(Math.random() * m--);

        //И поменять его местами с текущим
        t = array[m];
        array[m] = array[i];
        array[i] = t;
        l(array)
        return array;
    }
   
}
GenerateAndMixingArr(7);

//Получить индекс заданного элемента из массива 
const SearchOrdinalIndex = (array, elem) => {
    let arr = array, i, numIndex;
    
    i = 0
    numIndex = -1;
    while (i < arr.length) {
        i++
        if (arr[i] == elem) {
            numIndex = i;
            break;
        }
    }
    return l(numIndex === -1 ? `${elem} отсутствует в массиве` : `Заданный элемент ${elem} в массиве под порядковым номером ${numIndex}`)

}

SearchOrdinalIndex(GenerateAndMixingArr(5), 3)
//обрабатывать массивы одним циклом программа, которая будет объединять два массива: arr2 и arr3. 
let arr2 = [2, 2, 17, 21, 45, 12, 54, 31, 53]

let arr3 = [12, 44, 23, 5]
for (let i = 0; i <  arr3.length; i++){
    l(arr2.push(arr3[i]))
}
l(arr2)
l(arr2.concat(arr3))