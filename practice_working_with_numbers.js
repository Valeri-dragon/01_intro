const l =(log)=>{
console.log(log);
}
/*Вычисляем кол-во квартир в доме. 
Дано кол-во подъездов, этажей и квартир на одном этаже.
Нужно вывести кол-во квартир в одном подъезде и во всём доме*/
//кол-во подъездов
let entrances = 4;
//кол-во этажей 
let floors = 9;
//кол-во квартир на этаже
let flatsPerFloor = 4;

let flatsPerEntrance = floors * flatsPerFloor;
l(`Кол-во квартир в подъезде ${flatsPerEntrance}`)

let flats = entrances * flatsPerEntrance;
l(`Всего квартир в доме ${flats}`);
/*Пропорциидля рецепта коктейля "Кровавоя Мэри".
Даны пропорции ингридиентов для коктэйля и объём напитка, который нужно получить. 
Вычислить необходимый объём ингридиентов из этих данных.*/
let vodka = 50;
let tomatJuice = 120;
let lemonJuice = 10;
let tabasco = 1;
let worcester = 1;
//желаемый объём напитка
let volume = 500;

//коэффициент для получения объёма ингредиента
let k = (vodka + tomatJuice + lemonJuice + tabasco + worcester) / volume;

//сколько нужно водки для желаемого объёма коктейля "Кровавая Мэри"
l(`Для желаемого объёма коктейля "Кровавая Мэри" необходимое количество водки ${vodka * k}`);

/*Вычисление дискриминанта и решения квадратного уравнения a*x*x + b*x + c = 0
Даны параметры a, b и c для квадратного уравнения.
Нужно вывести возмодные значения x этого уравнения. */
let a = 3;
let b = 5;
let c = 10;

let d = b * b - 4 * a *c;
l(d);
/*старое решение
//корень дискриминанта
let dRoot = Math.sqrt(d);
l('x1 =  ' + (-b + dRoot) / (2 * a));
l('x2 =  ' + (-b - dRoot) / (2 * a));
*/
if (d < 0) {
    l(`Квадратное уравнение не имеет решений!`)
} else if ( d === 0) {
    let x = -b / (2 * a);
    l(`Квадратное уравнение имеет одно решение, x = ${x}`)
} else {
    let dRoot = Math.sqrt(d);
    let x1 = (-b + dRoot) / (2 * a)
    let x2 = (-b - dRoot) / (2 * a)
    l('x1 =  ' + x1);
    l('x2 =  ' + x2);
    l(`Квадратное уравнение имеет 2 решения: 
        x1 = ${x1}
        x2 = ${x2}`)
}

/*Вычисляем n чисел ряда Фибоначчи.
Каждое следующее число – сумма двух предыдущих.
*/

let n = 10;

let current = 0;
let prev = 1;
let prevPrev = 0;

while (n-- > 0) {
    prevPrev = prev;
    prev = current;
    current += prevPrev;
    l(current);
}